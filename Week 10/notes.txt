Single Page Applications 

SPA are web Applications that load a single HTMl page and dynamically update that page as the user interacts with the app
as we go from one page to another the whole (full page) HTML is not loaded from the backend, only the required parts are fetched from the backend.
there is no reloading, for optimizing there is lazy loading

01-react routing

npm i react-router-dom

there are same libraries for routing in mobile and desktop apps made with react native
use the Link tab to navigate instead of a tag or we can use the useNavigate hook

the useNavigate hook is used for the partial routing

Layouts -> they are used to stick some components of the page that do not change

02-react -> useRef

useRef is a hook in react that provides a way to create a refrence to a value or a DOM element that persists across renders 
but does not trigger a re-render when the value changes

uses are focusing on an value or a DOM element
refrence to a value is gien such that when we change the value the component does not re-render

there are three ways to define variables in react :
1. raw variables : let value = 1
2. use state : [value , setValue] = useState(0)
3. refrences : valueRef = useRef();

03-react -> clock with a start and a stop button


Rolling up the states and unoptimal re-render

as the application grows there will be multiple components that need to access the same state.
Instead of duplicating state in each component, you can lift the state up to Lowest Common Ancestor (LCA).
allowing the common ancestor to manage it


04-react -> toggle bulb application

Props and prop drilling

Prop drilling occurs when you need to pass data from a higher-level component down to a lower-level component
that is several layers deep in the component tree. This often leads to the following issues:

Complexity: You may have to pass props through many intermediate components that donâ€™t use the props themselves,
just to get them to the component that needs them.
Maintenance: It can make the code harder to maintain, as changes in the props structure require updates in multiple components.

05-react prop-drilling

Context API 

the context api enables to manage state across the application more effectively,
specially when dealing with deeply nested components

context api fixes the prop drilling

the context API provides a way to share values (state, functions etc. ) between the 
components without having to pass props down manually at every level

context must be stored in the context.ts file