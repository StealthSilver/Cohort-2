NEXT JS 

1. In a React project, you have to maintain a separate Backend project for your API routes
2. React does not provide out of the box routing (you have to use react-router-dom)
3. React is not SEO Optimised (not exactly true today because of React Server components)
4. Waterfalling problem

the react is not SEO optimised because of the waterfalling problem 

Search Engine optimisations

Google/Bing has a bunch of crawlers that hit websites and figure out what the website does. 
It ranks it on Google based on the HTML it gets back
The crawlers DONT usually run your JS and render your page to see the final output. 

Waterfall problem 

1. Fetching the index.html from the CDN
2. Fetching script.js from CDN
3. Checking if user is logged in (if not, redirect them to /login page)
4. Fetching the actual blogs
5. There are 4 round trips that happen one after the other (sequentially)

Next.js provides you the following upsides over React
1. Server side rendering - Get’s rid of SEO problems
2. API routes - Single codebase with frontend and backend
3. File based routing (no need for react-router-dom)
4. Bundle size optimisations, Static site generation
5. Maintained by the Vercel team
 
Downsides - 
1. Can’t be distributed via a CDN, always needs a server running that does server side rendering and hence is expensive
2. Very opinionated, very hard to move out of it

in next js the rendering is done on the server side and then the rendered code is returned to the client
in react the renering happens in the client side 

in the react application on building the bundles are created and then they can be distributed unlike next js

in react projects we can run the project via CDNs and it is cheaper than next js
