SYNCHRONOUS FUNCTIONS  (01.js)

A synchronous (sync) function is one that runs one after the other.
It means that the program will wait for the current task to finish
before moving on to the next task.
(the code runs in order)

ASYNCHRONOUS FUNCTIONS 

An asynchronous (async) function is one that allows other tasks to run while
itâ€™s waiting for something to finish (like loading data or waiting for a
response from a server). This means the program doesn't need to wait for
the async task to finish before continuing to the next one.
(the code runs out of order)

I/O Heavy Operations

there are some processes which take time 

1. reading contents of a file (02.js)
2. Starting a clock
3. HTTP requests

running the I/O bound tasks asynchronously is the best approach

CPU bound task -> they require heavy cpu processing 
e.g. big loops, recursions


Functional arguments
Passing a function to another function as an argument

Execution of the JS code

http://latentflip.com/loupe 

there are three sections the call stack, the Web API's section and the callback Queue.
the call stack calls the code synchronously one by one, all the async functions are sent to the web api's to maintain
the clock until they are executed.
The call stack keeps running, when the async functions complete then they wait in the callback queue until all the sync code runs
once the sync code completes then the event loop calls all the async outputs and the execution happens one by one

Natively async functions
1. readFile, setTimeout, fetch , database calls


* as JS is single threaded so it just has a single call stack

* to take inputs in java script there are two ways 
- pass the value as the function argument -> node index.js 100
- pass the value as the enviornment variable ->  NUM = 100 node index.js 