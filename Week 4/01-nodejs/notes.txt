NODE JS

Node JS is the open source runtime for JS 

1997 -> Netscape Nevigator
2012 / 2013 -> Node JS lets us run the JS in a server

Node JS is built on the Chrome V8 engine

JS Engines : Chrome -> V8 , Mozilla -> SpiderMonkey , Safari -> JavaScriptCore

BUN is another JS runtime, which is faster and it is written in Zig

EcmaScript is the standard JS organizational code

-> npm init -y (initialize the nodejs project)
this will create a package.json file
this is a configuration file, stores the important info. for the project

python has : pyproject.toml
java has : pom.xml
rust has : Cargo.tml


PACKAGE.JSON 

name : name of the directory
version : version of node js 
main : the entry point of the project 
scripts : it contains the commands which are used for execution 

keywords:            |
author:              |   metadata, used when publishing into npm (node package manager)
licence:             |
description:         | 

npm
pacakage maangers allows us to use the external packages , libraries or packages 
packages contain the reusable code
"start": "node index.js" -> this is the script which runs the code

npm install chalk -> using the "chalk" library

Using the external library

index.js
import chalk from "chalk"; -> importing the library

node_modules is a very heavy folder
we need not commit it on github, every dependency in the node_modeules is there in pckage.json 
to get the node_modules locally we just have to run npm install

npm registery has code written by other programmers and we can use them

npm i path -> path external library
console.log(__dirname) -> prints the working directory
console.log(path.join(__dirname, "index.js)) -> prints the joined path of the working file

"chalk": "^4.1.2" 
this is there in the dpendencies 

the three numbers represent the changes MAJOR.MINOR.PATCH 
the ^ sign means that npm will install latest version below 5

package-lock.json 

we lock/pins versions of dependencies so that multiple developers can have the same version of the dependency
we should commit the package.lock on github 


cli
Creating a command line interface

create a cli to take the file path as input and then output hte numebr of words in the file

the commander library gives -h for the help command
commander library lets us create a cli 

process.argv: An array containing all command-line arguments.
process.argv[0] is usually node
process.argv[1] is the path to your script

to convert node index.js into a cli name of choice -> alias worldcli = "node index.js"

FEAT : It indicates that a new feature has been added to the project.
FEAT: Add user authentication with JWT
This means a new feature (user authentication) was implemented.

^ this is called caret 
~ this is called til-duh
` this is called backtick

tehnables is another way to use async await, just like promises