ROUTE GROUPS
if any folder is wrapped in the () they are not used in url

app1: the layout in the (auth) route will only apply on the signin and signup page

DYNAMIC ROUTES 

a folder or file in the form [slug] defines a dynamic parameter in the route
e.g. /blog/[slug] might match /blog/1 or /blog/2

app2: using dynamic routes 

CATCH ALL SEGMENT 

this is used ot create infinite nested folders
[...blogs] -> this will catch everything after the blogs in blogs/1/2/3/4/

CLIENT SIDE RENDERING 

it is a modern technique where the rendering of the web page is done in the browser by js
it is sutomatically done by react 

CLIENT SIDE RENDERING : only this happens in react, there is no ssr in react.
next js has client side rendering but also has server side rendering 

SERVER SIDE RENDERING : the initial page on the next js renders on the next server and then it is rendered on the client side.

STATIC SITE GENERATION : gastby framework were heavy on static file generation
if the page is completely static and has no dynamic data then it can be statically generated, also static parts on the dynamic page can also be statically generated and dumped in a html file

to get the static pages , npm run build, the pages with circles are statically generate
we can also force client side render

HYDRATION

client components and server components
there are some components that will render on the server but will never render on the client

but some component do change over time we make them the client components, they also render on the server side

both the client and server side components are rendered on the server side, if using RTCPpperconnection, useState, useEffect, onClick then they must me client components

hydration is the process by which a client side js framework such as reaact takes over an already rendered HTML page and makes it interactive.
in next js the html page is server side rendered ir statically generated. On the client side the static page is hydrated wit React's bundle by event listeners and interactive behaviour

hydration happens on the client side

browser ---> user ---> CDN 
white page <--- index.html <--- CDN 

script ---> CDN 
JS runs the dev logic < --- CDN 
page renders

after building a js file and html file is generated by the react building

client side rendering is not SEO optimised, user sees a flash before the reload, also there is the waterfall problem
the browser is waterfalling the requests one aftere the other.

SERVER SIDE RENDERING 

when the rendering process happens on the server, this is provided by next js

browser ---> url ---> next server ---> db 
page renders with the details <--- html is populated <--- next server 
the server lifted the components from the server. it is seo optimised, gets rid of hte waterfalling problem as only one request is sent

ssr is expensive, vercel bill is high
harder to scale as we cannot scale it through CDNs 

how to make SSR less expensive 

STATIC SITE GENERATION 

at ssg the page's HTML is generated at the build time and converted into a static file which does not change.
when the user goes on the page it is not re-rendered. this is only possible for static pages

by default the components in next js are statically generated, there is no re-rendering

we can revalidate the cache and then the page can be updated using revalidate
also we can use next actions

NEXT AUTH 

this is a authentication library, used in next js

external providers :
autho.com 
clerk.com
firebase auth

we can use it without nextAuth by using in house cookies

to login with google / facebook we can use Oauth protocol

the first request cannot have the request header with the token. so the jwt approach or the local storage approach cannot be used in next js
so we use the cookie approach

in next js by default there is ssr so we cannot use the localstorage over there

nextAuth supports providers. login with email, login with google, login with faceboot.
all the companies which use OAuth can be provided via Next Auth

use a catch all route by creating api/auth/[...nextAuth]/route.ts

app3 this will give the default signin page on localhost:300/api/auth/signin we can ovverride this but this is the basic page with next auth

we can add more providers by next auth and providers 

