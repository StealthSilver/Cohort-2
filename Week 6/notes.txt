AUTHENTICATION 

following are the steps how authentication works on any website

firstly you signup to any website and the mail id and the hashed and salted passwords are stored in the database of the website

1. the user comes to your website
2. the user sends a request to /signin with their username and password 
3. the user gets back a token
4. in every subsequesnt request, the user sends the token to identify it self to the backend
the token is the thing which gives you persistant login on the website
a new token is sent by the server every time the user signs in

after signup: 

step 1: login
frontend -> username, password -> backend
frontend <-       token       <-  backend

step2: request
frontend -> GET /courses + token -> backend
frontend <-       courses[]     <-  backend

the token is stored in the network tab -> header -> cookie

the token is the metadata so it is sent it in the header and not in the body

index3.js

JWT -> JSON WEB TOKENS

the current token implementation is statefull, the token are stored in the db for every user and to check the authenticated endpoint we need to hit the db everytime

for making it stateless the username itself is encrypted to form the token

the JWT are compact and self contained way to represent information between two parties
JWT's contain all the information needed to authenticate a request, so the server dosen't need to store session data.
All the user data is encoded in the token itself 

JWT are stateless

JWT prevent 1 round trip from the backend server and database for any user request

step1:
frontend -> /signup + username + password -> backend -> store the info in the db 

step2: 
frontend -> /signin + username + password -> backend -> auth from the db and then create the jwt
frontend <-            jwt                <- backend 

step3:
frontend -> /me + jwt -> backend 
fronetnd <- content[] <- backend 

here in step 3 no need to hit the database

to decode JWT's -> jwt.io

for every request user sent to the backend, user has to send the token along with it in the header

* to get the public ip : in the terminal type ifconfig -> you can check the localhost on any other device on the same network now
* cookie are special type of auth-header which are automatically set by the browser 
the server returns teh cookie in the response header and with every subsequent request teh cset-cookie is sent to the server for authentication

* go to the inspect -> network -> get any request and copy as curl to get all the headers 

working of jwts

string + secret -> encoding -> jwt 

with the jwt we can do two things 
1. decode the token without using the secret 
2. verify the token using the secret

this is different that encryption as the original string can be decoded