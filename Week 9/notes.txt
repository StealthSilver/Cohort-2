FOUNDATIONS OF REACT

for static websites react is not needed -> don't increase bundle size
before react and vue, jQuery and backbone.js were used to make DOM manipulation easier

every react website finally renders into HTML, CSS and JS

DYNAMIC WEBSITE CONCEPTS

basic dynamic website -> index.html 

STATE : this is the js object that represents the state of the app. in represents the dynamic things in the app (things that change)

State management tools
1. Redux
2. Recoil
3. Zustand


COMPONENTS : it represents how the DOM element should render, given a state. 
the components are re-usable and dynamic

Component Libraries 
1. Material UI
2. Ant Design
3. Chakra UI
4. React Bootstrap 
5. ShadCN

* A state change triggers a re-render. A re-render represents the actual DOM being manipulated when the state changes

* we usually have to define all the components once and then we have to update the state of the app
* the component returns XML

React V-0 code -> index2.html

React files are written in JSX -> JavaScript XLM as it returns the components in XML

01-react -> useState

the entry point of any react app is the App.jsx file 

useState -> the useState is a hook that lets you add state to functional components. It returns an array with the current state and 
the function to update it.

any dynamic component is re-rendered when the state variable changes. there are infinite renders. 
to remove the re-rendering, remote the StrictMode

react components have lifecycles. every component is mounted, then the re-rendering happens and then the component is un-mounted

the useEffect hook is used to hook the lifecycle events of the component

we can seprately write logic on the mounting and unmounting of the events

02-react -> Conditional rendering with useEffect

03-react -> useEffect clear render


REACT RECAP -> 04-react

make a new react project using vite
can be done without vite using webpack

Vite is a build tool it consists of a dev server and a bundler to run the project with rollup

npm create vite@latest [name of project]

in the package.json there are two dependencies the react and the react dom 
to create a mobile application in react native we have to change the DOM to react-native

entry point : index.html (root component) -> main.jsx -> app.jsx 

remove all the predefiuned styles in both the css files and also the prewritten code in App.jsx
now we have an empty canvas to create our project

npm run dev to run the project

only the root div in html is controlled by react we can change other stuff in index.html and see the changes in the app
 <body>
    above the root
    <div id="root"></div>
    below the root
    <script type="module" src="/src/main.jsx"></script>
  </body>

benefits of react
1. structuring the app into components
2. difining and changging the state of the application

In react the components are the building block elements of the user interface. 
they allow to split the Ui into resuable and independent pieces

the data inside the components are changed by props

useState -> 05-react

when the value of a state variable changes, the component that uses that state re-renders

useEffect -> 07-react

side effects -> they are the operations that interact with teh outside world
e.g. fetching data from an api 
     modifying the DOM manually 
     subscribing to events like (web sockets , timers or browser events)
     starting a clock

if we try to run the side effects directly in the components there will be duplicated renders

dependency array , cleanup logic ->  08-react

clean up logic is necessary when we want to unsubscribe from some renders 

conditional rendering -> 09-react

props -> 10-react

Props are the way to pass data from one component to another in React.

children -> 11-react

keys and lists -> 12-react
keys are unique ids for the list items

inline styles are given to components in objects
style={{
            border: '1px solid #ccc',
            borderRadius: '5px',            
        }}


13-react -> class based components and lifecycle events 

class based components vs functional components 

class based components were used previously now functions are used with hooks

Lifecycle events -> in react the lifecycle events refer to the specific points in a component's life where you can execute code in
response to changes or actions

error boundry -> 14-react

this lets bound the error so if some component falis then the error does not propogates

fragments in react 

In React, a component can return a single parent element, but it can contain multiple children within that single parent

wrong method 

const MyComponent = () => {
    return (
        <h1>Hello</h1>
        <p>World</p> // This line will cause an error
    );
};


right method

const MyComponent = () => {
    return (
        <>
            <h1>Hello</h1>
            <p>World</p>
        </>
    );
};



