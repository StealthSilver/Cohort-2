Custom hooks 

useState -> store a state variable, re-render a component when the variable changes 
useEffect -> Run an effect whenever a dependency changes  

custom hook is a function but it should start with use, it should use another hook inside it
you should never write a native function using a hook

useCounter hook - 01-react :

we use custom hooks for increase readability and resuing

reusing the useCounter hook - 02-react 

usePostTitle hook - 03-react
the fetch call to get the data from the backend is written in the use effect hook

we can shift the hook logic in a seperate file, in src create hooks folder and the file name can be hookName.js or hookName.jsx

useFetch : this is provided by react swt and tanstack query

useFetch - 04-react : takes the url for the backend and returns the data from the backend
this is not the correct implementation as the useFetch initializes an empty object which is filled with data, we can see it on reloading

05-react : making the useFetch dynamic

usePrev hook -> it does something else than whatr it is supposed to 06-react

as the value of the variable changes the usePrev tracks the previous value of the variable

the usePref works because the ref returns first and then the effect would run
https://giacomocerquone.com/blog/life-death-useprevious-hook/ -> blog 

useDebounce hook -> 07-react 

debouncing is skipping the requests if they are coming really fast and only after the user has given the complete request then sending it to the backend
used mostly in search bars

there are libraries which have a lot of custom hooks 

https://usehooks.com

RECOIL - state management library

https://youtu.be/_ISAA_Jt9kI?si=VkTAwzjP9opDjohb

recoil lets you manage global state with fine-grained control 
recoil minimizes unnecessary renders by only re-rendering the components that depend on the changed atoms

Atoms : Units of state that can be read from ans written to from any component
Selectors : Functions that derive state from the atoms or other selectors, allowing for computed state

01-react : unoptimal prop drilling method 

npm i recoil
02- react : optimal recoil method

atom is like the useState : 