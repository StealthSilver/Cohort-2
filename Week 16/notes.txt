WEBSOCKETS 

web sockets is another protocol like HTTP 

WebSockets provide a way to establish a persistent,
full-duplex communication channel over a single TCP connection between the client (typically a web browser) and the server.

for any connction there is a three way handshake
1. browser asks the server to connect
2. server allows the browser to connect 
3. the browser establishes a connection

web sockets create a persistent connection persistent means that once a connection is made it stays there for a connection
the same connection is established by the WEB-rtc protocol

in HTTP we can use polling or non-polling to create the same architecture

Soket-IO is used by Coin DCX and Canva

web sockets are used in
for real time communication -> used in trading applications in their order book (ws.backpack.exchange)
for chat applications
for sports update applications
for financial tickers
for interactive services -> excelidraw

in leetcode polling is used -> they can use websockets but they use polling

there are various libraries in node js which use websockets

1.https://www.npmjs.com/package/websocket
2.https://github.com/websockets/ws
3.https://socket.io/

we will use the ws library

socket io is another protocol dependent on websockets, it makes using the websockets cleaner
using socket io in cross platform is tough but there are libraries

https://socket.io/blog/native-socket-io-and-android/
https://github.com/1c3t3a/rust-socketio

metaverse -> used websockets for chat and web rtc(UDP) for motion or voice chat 
https://framevr.io/

web sockets are different from pub sub in kafka 

SCALING WEB SOCKET APPLICATIONS 

web sockets are not stateless unlike HTTP 
they are sticky and

How Are WebSocket Servers Scaled?
WebSocket servers maintain persistent, full-duplex connections with clients, making scaling more complex than traditional request-response architectures like HTTP.

To scale a WebSocket server, you need to handle:

High connection volumes (thousands/millions of connections)
Load balancing (distributing connections across multiple servers)
Message broadcasting (sending messages between servers)
Fault tolerance & failover (ensuring uptime even if a server fails)
1. Vertical Scaling (Single Server)
The simplest approach is upgrading the server’s hardware (CPU, RAM, network bandwidth). However, this has limitations:

A single server can only handle a limited number of connections (e.g., 50,000–100,000 WebSocket connections per machine, depending on hardware).
No redundancy—if the server crashes, all connections are lost.
Best used for: Small applications with limited WebSocket traffic.

2. Horizontal Scaling (Multiple Servers)
For high traffic, WebSockets need multiple servers. This requires:

Load Balancing WebSocket Connections
Message Synchronization Across Servers
Step 1: Load Balancing WebSocket Connections
Unlike HTTP, WebSockets require sticky sessions (once a client connects, it must stay on the same server). Common WebSocket load balancers:

Nginx with sticky sessions (route users to the same server)
HAProxy (efficient connection handling)
Cloud Load Balancers (AWS ELB, Google Cloud Load Balancer, etc.)

** only the real time messages pass trough the web sockets 
** and message in the ledger is stored in local storage and then http requests are sent to give messages