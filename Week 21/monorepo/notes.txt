MONOREPOS

this is a way to structure the application.
the debate is should we have the frontend, backend and the devops in the same repo, or in the different repo.

if the code is in the same repo, then it is a monorepo. the upside is that the setup is really easy and the downside is that if someone only needs to work on a single part then it is not possible
e.g. 100xdevs/dailycode, dub.sh 

in these repo the structure will have app and packages

we can store the services ( backend , frontend) in various top level folders (monorepo framework is not required), if
1. services are highly decoupled (dont share any code)
2. services dont depend on each other

but if there is some sharable codes then we can use a monorepo structure where the services are in a single repo 
e.g. sharing the zod code for both frontend and backend

for the monorepo the builds are optimised, tools like turborepo provide optimised build, reduce testing times
they also have central testing and configuraton files

common monorepo frameworks, 
lerna, nx, turborepo (not exactly a monorepo framework), yarn/npm workspaces

TURBOREPO 

this is not the monorepo framework , most applications use turborepo now a days
created by jared palmer 

build system vs build system orchestrator vs monorepo framework