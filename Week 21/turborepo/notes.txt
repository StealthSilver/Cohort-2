MONOREPOS

this is a way to structure the application.
the debate is should we have the frontend, backend and the devops in the same repo, or in the different repo.

if the code is in the same repo, then it is a monorepo. the upside is that the setup is really easy and the downside is that if someone only needs to work on a single part then it is not possible
e.g. 100xdevs/dailycode, dub.sh 

in these repo the structure will have app and packages

we can store the services ( backend , frontend) in various top level folders (monorepo framework is not required), if
1. services are highly decoupled (dont share any code)
2. services dont depend on each other

but if there is some sharable codes then we can use a monorepo structure where the services are in a single repo 
e.g. sharing the zod code for both frontend and backend

for the monorepo the builds are optimised, tools like turborepo provide optimised build, reduce testing times
they also have central testing and configuraton files

common monorepo frameworks, 
lerna, nx, turborepo (not exactly a monorepo framework), yarn/npm workspaces

TURBOREPO 

this is not the monorepo framework , most applications use turborepo now a days
created by jared palmer 

build system vs build system orchestrator vs monorepo framework

build systems are the ts to js compilers, bundlers, minification

build system orchestrator (turborepo), the turborepo tell other build tools to call at the defined times

monorepo framework provides tools to manage project configuratons

turborepo is added to any monorepo project for :

1. caching 
2. parallelization 
3. dependency graph awareness

anything cannot be a turborepo if its not a monorepo 

to create a turborepo :

1. npx create-turbo@latest

after initilizing, there is a apps folder, inside which there are two next frontends: web and docs
web : the landing page , docs : the documentation

the packages/ui contains the reusable react components that can be used by the web and the docs

npm run dev will start two applications web and docs 

if the code is changes in the web then the web will only rebuild, same with docs.
as the unchanges files are cached. this helps when there are too many builds in the CI/CD

if the ui folder is changes then both teh processes restart and both of them depend on the ui

if you want 4 frontends in the turborepo. just copy the docs and change the name in package.json
to create the backend, create a server folder and do the typescript init and all
yarn build or npn build will build hte server too